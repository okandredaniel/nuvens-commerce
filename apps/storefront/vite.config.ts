import { reactRouter } from '@react-router/dev/vite';
import { hydrogen } from '@shopify/hydrogen/vite';
import { oxygen } from '@shopify/mini-oxygen/vite';
import tailwindcss from '@tailwindcss/vite';
import fs from 'node:fs';
import path from 'node:path';
import { fileURLToPath } from 'node:url';
import { defineConfig, loadEnv, Plugin } from 'vite';
import tsconfigPaths from 'vite-tsconfig-paths';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function brandEntryPlugin(appDir: string, brandId: string): Plugin {
  const entryPath = path.resolve(appDir, 'app/brand-ui.generated.ts');
  const target = path.resolve(appDir, `../../packages/brand-ui-${brandId}/src`);

  const content = `// auto-generated by Vite plugin
  export * from '${normalizeForTs(entryPath, target)}';
  `;

  return {
    name: 'brand-entry',
    apply: 'serve',
    configResolved() {
      ensureDir(path.dirname(entryPath));
      fs.writeFileSync(entryPath, content, 'utf8');
    },
    buildStart() {
      ensureDir(path.dirname(entryPath));
      fs.writeFileSync(entryPath, content, 'utf8');
    },
  };
}

function normalizeForTs(fromFile: string, toAbsPath: string) {
  let rel = path.relative(path.dirname(fromFile), toAbsPath);

  if (path.sep === '\\') rel = rel.replace(/\\/g, '/');
  return rel.startsWith('.') ? rel : `./${rel}`;
}

function ensureDir(dir: string) {
  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
}

export default defineConfig(({ mode }) => {
  const env = loadEnv(mode, __dirname, '');
  const BRAND_ID = env.BRAND_ID || process.env.BRAND_ID;
  if (!BRAND_ID) {
    throw new Error(
      'BRAND_ID is missing or invalid. Please set a non-empty BRAND_ID in your environment variables or in a .env file (e.g., BRAND_ID=your-brand-id).',
    );
  }

  const appDir = __dirname;

  return {
    plugins: [
      tailwindcss(),
      hydrogen(),
      oxygen(),
      reactRouter(),
      tsconfigPaths(),
      brandEntryPlugin(appDir, BRAND_ID),
    ],
    resolve: {
      alias: {
        '~': path.resolve(__dirname, 'app'),
        '@nuvens/brand-ui': path.resolve(__dirname, 'app/brand-ui.generated.ts'),
        '@nuvens/ui-core': path.resolve(__dirname, '../../packages/ui-core/src'),
        '@nuvens/brand-tokens': path.resolve(__dirname, '../../packages/brand-tokens/src'),
      },
      dedupe: ['react', 'react-dom', 'i18next', 'react-i18next'],
    },
    build: {
      assetsInlineLimit: 0,
    },
    ssr: {
      noExternal: ['i18next', 'react-i18next', 'html-parse-stringify', 'void-elements'],
      optimizeDeps: {
        include: ['react-i18next', 'i18next'],
      },
    },
  };
});
